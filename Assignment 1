/*
Assignment 1
Pseudocode:
Main Method:
boolean winGame = false;
boolean loseGame = false;
boolean result = false;
System.out.println("Hello! Welcome to sudoku! Starting game...");
result = sudoku();
if (result){
    System.out.println("AI won!");
}
else if (!result){
    System.out.println("AI lost!");
}

Sudoku Method:
    generate and print sudoku board
    while (!fullBoard || mistakes < 3){
        if (no slots left){
            fullBoard = true;
            break;
        }
        (picks empty cell based on which area has the least general slots filled
        then the ai looks to see which numbers havent been filled yet
        the ai then fills the slots with the numbers it has decided)
        (if a cell already has a number that the ai included, mistakes++)
        (print sudoku board)
    }
    return fullBoard;
 */
public class Main{
    static final int N = 9;
    public static void main (String[] args){
        System.out.println("Hello! Welcome to sudoku! Starting game...");
        result = sudoku();
        if (result){
            System.out.println("AI Won.");
        }
        else if (!result){
            System.out.println("AI lost.");
        }
    }

    public boolean sudoku(){
        int[][] board = {
            {3, 0, 6, 5, 0, 8, 4, 0, 0},
            {5, 2, 0, 0, 0, 0, 0, 0, 0},
            {0, 8, 7, 0, 0, 0, 0, 3, 1},
            {0, 0, 3, 0, 1, 0, 0, 8, 0},
            {9, 0, 0, 8, 6, 3, 0, 0, 5},
            {0, 5, 0, 0, 9, 0, 6, 0, 0},
            {1, 3, 0, 0, 0, 0, 2, 5, 0},
            {0, 0, 0, 0, 0, 0, 0, 7, 4},
            {0, 0, 5, 2, 0, 6, 3, 0, 0}
        };

        int mistakes = 0;
        boolean changed;

        do{
            if (isFull(board) || mistakes >= 3){
                break;
            }

            Unit densest = findDensestUnit(board);
            if (densest == null) break;

            changed = (densest.type == UnitType.ROW) ? fillHiddenSinglesInRow(board, densest.index) : fillHiddenSinglesInCol(board, densist.index);

            if (!changed){
                //read todos
                break;
            }

            printBoard(board);
        } while (changed);
        return isFull(board);
    }

    enum UnitType {ROW, COL}

    static class Unit{
        final UnitType type;
        final int index;
        Unit(UnitType t, int i) {this.type = t; this.index = i;}
    }

    static Unit findDensestUnit(int[][] board){
        int bestCount = -1;
        Unit best = null;

        //rows
        for (int r = 0; r < N; r++){
            int filled = countFilledRow(board, r);
            if (filled > bestCount && filled < N){
                bestCount = filled;
                best = new Unit(UnitType.ROW, r);
            }
        }
        //cols
        for (int c = 0; c < N; c++){
            int filled = countFilledCol(board, c);
            if (filled > bestCount && filled < N){
                bestCount = filled;
                best = new Unit(UnitType.COL, c);
            }
        }
        return best;
    }

    static int countFilledRow(int[][] b, int r){
        int cnt = 0;
        for (int c = 0; c < N; c++){
            if (b[r][c] != 0){
                cnt++;
            }
        }
    }

    static int countFilledCol(int[][] b, int c){
        int cnt = 0;
        for (int r = 0; r < N; r++){
            if (b[r][c] != 0){
                cnt++;
            }
        }
        return cnt;
    }

    static boolean fillHiddenSinglesInRow(int[][] b, int r){
        boolean changed = false;
        boolean[] present = new boolean[10];
        int[] empties = new int[N];
        int emptiesCount = 0;

        for (int c = 0; c < N; c++){
            int v = b[r][c];
            if (v == 0){
                empties[emptiesCount++] = c;
            }
            else{
                present[v] = true;
            }
        }

        if (emptiesCount == 0){
            return false;
        }

        for (int d = 1; d <= 9; d++){
            if (present[d]){
                continue;
            }
            int onlyCol = -1, places = 0;

            for (int i = 0; i < emptiesCount; i++){
                int c = empties[i];
                if (isCandidate(b,r,c,d)){
                    places++;
                    onlyCol = c;
                    if (places > 1){
                        break;
                    }
                }
            }
            if (places == 1){
                b[r][onlyCol] = d;
                changed = true;
            }
        }
        return changed;
    }

    static boolean fillHiddenSinglesInCol(int[][] b, int c){
        boolean changed = false;
        boolean[] present = new boolean[10];
        int[] empties = new int[N];
        int emptiesCount = 0;

        for (int r = 0; r < N; r++){
            int v = b[r][c];
            if (v == 0){
                empties[emptiesCount++] = r;
            }
            else{
                present[v] = true;
            }
        }

        if (emptiesCount == 0){
            return false;
        }

        for (int d = 1; d <= 9; d++){
            if (present[d]){
                continue;
            }
            int onlyCol = -1, places = 0;

            for (int i = 0; i < emptiesCount; i++){
                int c = empties[i];
                if (isCandidate(b,r,c,d)){
                    places++;
                    onlyRow = r;
                    if (places > 1){
                        break;
                    }
                }
            }
            if (places == 1){
                b[onlyRow][c] = d;
                changed = true;
            }
        }
        return changed;
    }

    static boolean isCandidate(int[][] b, int r, int c, int d){
        if (b[r][c] != 0){
            return false
        }

        //row
        for (int cc = 0; cc < N; cc++){
            if (b[r][cc] == d){
                return false
            }
        }
        //col
        for (int rr = 0; rr < N; rr++){
            if (b[rr][c] == d){
                return false
            }
        }
        //board
        int br = (r / 3) * 3
        bc = (c / 3) * 3;
        for (int rr = br; rr < br + 3; rr++){
            for (int cc = bc; cc < bc + 3; cc++){
                if (b[rr][cc] == d){
                    return false;
                }
            }
        }
        return true;
    }
    static boolean isFull(int[][] b) {
        for (int r = 0; r < N; r++)
            for (int c = 0; c < N; c++)
                if (b[r][c] == 0) return false;
        return true;
    }

    static void printBoard(int[][] b) {
        System.out.println("+-------+-------+-------+");
        for (int r = 0; r < N; r++) {
            for (int c = 0; c < N; c++) {
                if (c % 3 == 0) System.out.print("| ");
                System.out.print((b[r][c] == 0 ? ". " : (b[r][c] + " ")));
            }
            System.out.println("|");
            if (r % 3 == 2) System.out.println("+-------+-------+-------+");
        }
    }
}
